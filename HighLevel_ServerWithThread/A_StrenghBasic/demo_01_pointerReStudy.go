package main

import "fmt"

/*
指针是一个代表着某个内存地址的值。这个内存地址往往是在内存中存储的另一个变量的起始位置。Go语言
对指针的支持介于Java和C/C++语言之间，它既没有像java那样取消了代码对指针的直接操作能力，也避免了
C/C++语言中由于对指针的滥用造成的安全和可靠性问题

*p 解引用、间接引用

栈帧：用来给函数运行提供内存空间。栈帧取内存与stack上，当函数调用时产生栈帧，函数调用结束后栈帧释放

	栈帧存储：1.局部变量 2.形参（形参与局部变量的存储地位等同） 3.内存字段描述值

空指针：定义指针后没有赋值
野指针：被一片无效的地址空间初始化
*/
func main() {
	var a int = 10
	var p *int = &a
	fmt.Println(p)  // 0xc0000a6058
	fmt.Println(*p) // 10
	*p = 100
	fmt.Println(a) // 100
}
